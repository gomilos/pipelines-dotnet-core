# Starter pipeline
# Start with a minimal pipeline that you can customize to build and deploy your code.
# Add steps that build, run tests, deploy, and more:
# https://aka.ms/yaml

trigger:
  branches:
    include:
    - master
  paths:
    exclude:
    - README.md
pool:
  vmImage: ubuntu-latest

variables:
  RestoreBuildProjects: '**/*.csproj'
  TestProjects: '**/*[Tt]ests/*.csproj'
  BuildConfiguration: 'Release'

name: $(date:yyyyMMdd)$(rev:.r)

stages:
- stage: Build
  jobs:
  - job: BuildJob 
    steps:  
    - task: DotNetCoreCLI@2
      displayName: Restore
      inputs:
        command: restore
        projects: '$(RestoreBuildProjects)'
    - task: DotNetCoreCLI@2
      displayName: Build
      inputs:
        projects: '$(RestoreBuildProjects)'
        arguments: --no-restore --configuration '$(BuildConfiguration)'
    - task: DotNetCoreCLI@2
      displayName: Test
      inputs:
        command: test
        projects: $(TestProjects)
        arguments: --configuration '$(BuildConfiguration)'
    - task: DotNetCoreCLI@2
      displayName: Publish
      inputs:
        command: publish
        publishWebProjects: True
        projects: '$(RestoreBuildProjects)'
        arguments: --configuration $(BuildConfiguration) --output $(build.artifactstagingdirectory)
        zipAfterPublish: True
    - task: PublishBuildArtifacts@1
      displayName: Publish Artifact
      condition: succeededOrFailed()
      inputs:
        PathtoPublish: $(build.artifactstagingdirectory)
        TargetPath: '\\my\share\$(Build.DefinitionName)\$(Build.BuildNumber)'
- stage: Deploy
  jobs:
  - deployment: DeployWeb
    displayName: deploy Web App
    pool:
      vmImage: ubuntu-latest
    # creates an environment if it doesn't exist
    environment: 'pipelinesdontnetcore-dev'
    strategy:
      # default deployment strategy, more coming...
      runOnce:
        deploy:
          steps:
          - script: echo my first deployment
    